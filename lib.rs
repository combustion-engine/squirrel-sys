#![allow(dead_code, non_camel_case_types, non_upper_case_globals, non_snake_case)]

#[link(name = "squirrel", kind = "static")]
extern {}

#[link(name = "sqstdlib", kind = "static")]
extern {}

/* automatically generated by rust-bindgen */

pub enum SQVM {}

pub enum SQTable {}

pub enum SQArray {}

pub enum SQString {}

pub enum SQClosure {}

pub enum SQGenerator {}

pub enum SQNativeClosure {}

pub enum SQUserData {}

pub enum SQFunctionProto {}

pub enum SQRefCounted {}

pub enum SQClass {}

pub enum SQInstance {}

pub enum SQDelegable {}

pub enum SQOuter {}

pub type SQInteger = ::std::os::raw::c_longlong;
pub type SQUnsignedInteger = ::std::os::raw::c_ulonglong;
pub type SQHash = ::std::os::raw::c_ulonglong;
pub type SQInt32 = ::std::os::raw::c_int;
pub type SQUnsignedInteger32 = ::std::os::raw::c_uint;
pub type SQFloat = f32;
pub type SQRawObjectVal = ::std::os::raw::c_longlong;
pub type SQUserPointer = *mut ::std::os::raw::c_void;
pub type SQBool = SQUnsignedInteger;
pub type SQRESULT = SQInteger;
pub type SQChar = ::std::os::raw::c_char;

#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum tagSQObjectType {
    OT_NULL = 16777217,
    OT_INTEGER = 83886082,
    OT_FLOAT = 83886084,
    OT_BOOL = 16777224,
    OT_STRING = 134217744,
    OT_TABLE = 167772192,
    OT_ARRAY = 134217792,
    OT_USERDATA = 167772288,
    OT_CLOSURE = 134217984,
    OT_NATIVECLOSURE = 134218240,
    OT_GENERATOR = 134218752,
    OT_USERPOINTER = 2048,
    OT_THREAD = 134221824,
    OT_FUNCPROTO = 134225920,
    OT_CLASS = 134234112,
    OT_INSTANCE = 167804928,
    OT_WEAKREF = 134283264,
    OT_OUTER = 134348800,
}

pub type SQObjectType = tagSQObjectType;

pub enum SQWeakRef {}

#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tagSQObjectValue {
    pub _bindgen_data_: [u64; 1usize],
}

impl tagSQObjectValue {
    pub unsafe fn pTable(&mut self) -> *mut *mut SQTable {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pArray(&mut self) -> *mut *mut SQArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pClosure(&mut self) -> *mut *mut SQClosure {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pOuter(&mut self) -> *mut *mut SQOuter {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pGenerator(&mut self) -> *mut *mut SQGenerator {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pNativeClosure(&mut self) -> *mut *mut SQNativeClosure {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pString(&mut self) -> *mut *mut SQString {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pUserData(&mut self) -> *mut *mut SQUserData {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn nInteger(&mut self) -> *mut SQInteger {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fFloat(&mut self) -> *mut SQFloat {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pUserPointer(&mut self) -> *mut SQUserPointer {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pFunctionProto(&mut self) -> *mut *mut SQFunctionProto {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pRefCounted(&mut self) -> *mut *mut SQRefCounted {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pDelegable(&mut self) -> *mut *mut SQDelegable {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pThread(&mut self) -> *mut *mut SQVM {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pClass(&mut self) -> *mut *mut SQClass {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pInstance(&mut self) -> *mut *mut SQInstance {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pWeakRef(&mut self) -> *mut *mut SQWeakRef {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn raw(&mut self) -> *mut SQRawObjectVal {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}

impl ::std::default::Default for tagSQObjectValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type SQObjectValue = tagSQObjectValue;

#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tagSQObject {
    pub _type: SQObjectType,
    pub _unVal: SQObjectValue,
}

impl ::std::default::Default for tagSQObject {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type SQObject = tagSQObject;

#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tagSQMemberHandle {
    pub _static: SQBool,
    pub _index: SQInteger,
}

impl ::std::default::Default for tagSQMemberHandle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type SQMemberHandle = tagSQMemberHandle;

#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tagSQStackInfos {
    pub funcname: *const SQChar,
    pub source: *const SQChar,
    pub line: SQInteger,
}

impl ::std::default::Default for tagSQStackInfos {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type SQStackInfos = tagSQStackInfos;
pub type HSQUIRRELVM = *mut SQVM;
pub type HSQOBJECT = SQObject;
pub type HSQMEMBERHANDLE = SQMemberHandle;
pub type SQFUNCTION =
::std::option::Option<extern "C" fn(arg1: HSQUIRRELVM) -> SQInteger>;
pub type SQRELEASEHOOK =
::std::option::Option<extern "C" fn(arg1: SQUserPointer, size: SQInteger)
                                    -> SQInteger>;
pub type SQCOMPILERERROR =
::std::option::Option<unsafe extern "C" fn(arg1: HSQUIRRELVM,
                                           arg2: *const SQChar,
                                           arg3: *const SQChar,
                                           arg4: SQInteger,
                                           arg5: SQInteger)>;
pub type SQPRINTFUNCTION =
::std::option::Option<unsafe extern "C" fn(arg1: HSQUIRRELVM,
                                           arg2: *const SQChar, ...)>;
pub type SQDEBUGHOOK =
::std::option::Option<unsafe extern "C" fn(arg1: HSQUIRRELVM,
                                           arg2: SQInteger,
                                           arg3: *const SQChar,
                                           arg4: SQInteger,
                                           arg5: *const SQChar)>;
pub type SQWRITEFUNC =
::std::option::Option<extern "C" fn(arg1: SQUserPointer,
                                    arg2: SQUserPointer, arg3: SQInteger)
                                    -> SQInteger>;
pub type SQREADFUNC =
::std::option::Option<extern "C" fn(arg1: SQUserPointer,
                                    arg2: SQUserPointer, arg3: SQInteger)
                                    -> SQInteger>;
pub type SQLEXREADFUNC =
::std::option::Option<extern "C" fn(arg1: SQUserPointer) -> SQInteger>;

#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tagSQRegFunction {
    pub name: *const SQChar,
    pub f: SQFUNCTION,
    pub nparamscheck: SQInteger,
    pub typemask: *const SQChar,
}

impl ::std::default::Default for tagSQRegFunction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type SQRegFunction = tagSQRegFunction;

#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tagSQFunctionInfo {
    pub funcid: SQUserPointer,
    pub name: *const SQChar,
    pub source: *const SQChar,
    pub line: SQInteger,
}

impl ::std::default::Default for tagSQFunctionInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type SQFunctionInfo = tagSQFunctionInfo;
pub type SQFILE = *mut ::std::os::raw::c_void;
pub type SQRexBool = ::std::os::raw::c_uint;

pub enum SQRex {}

#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SQRexMatch {
    pub begin: *const SQChar,
    pub len: SQInteger,
}

impl ::std::default::Default for SQRexMatch {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

extern "C" {
    pub fn sq_open(initialstacksize: SQInteger) -> HSQUIRRELVM;
    pub fn sq_newthread(friendvm: HSQUIRRELVM, initialstacksize: SQInteger)
                        -> HSQUIRRELVM;
    pub fn sq_seterrorhandler(v: HSQUIRRELVM);
    pub fn sq_close(v: HSQUIRRELVM);
    pub fn sq_setforeignptr(v: HSQUIRRELVM, p: SQUserPointer);
    pub fn sq_getforeignptr(v: HSQUIRRELVM) -> SQUserPointer;
    pub fn sq_setsharedforeignptr(v: HSQUIRRELVM, p: SQUserPointer);
    pub fn sq_getsharedforeignptr(v: HSQUIRRELVM) -> SQUserPointer;
    pub fn sq_setvmreleasehook(v: HSQUIRRELVM, hook: SQRELEASEHOOK);
    pub fn sq_getvmreleasehook(v: HSQUIRRELVM) -> SQRELEASEHOOK;
    pub fn sq_setsharedreleasehook(v: HSQUIRRELVM, hook: SQRELEASEHOOK);
    pub fn sq_getsharedreleasehook(v: HSQUIRRELVM) -> SQRELEASEHOOK;
    pub fn sq_setprintfunc(v: HSQUIRRELVM, printfunc: SQPRINTFUNCTION,
                           errfunc: SQPRINTFUNCTION);
    pub fn sq_getprintfunc(v: HSQUIRRELVM) -> SQPRINTFUNCTION;
    pub fn sq_geterrorfunc(v: HSQUIRRELVM) -> SQPRINTFUNCTION;
    pub fn sq_suspendvm(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sq_wakeupvm(v: HSQUIRRELVM, resumedret: SQBool, retval: SQBool,
                       raiseerror: SQBool, throwerror: SQBool) -> SQRESULT;
    pub fn sq_getvmstate(v: HSQUIRRELVM) -> SQInteger;
    pub fn sq_getversion() -> SQInteger;
    pub fn sq_compile(v: HSQUIRRELVM, read: SQLEXREADFUNC, p: SQUserPointer,
                      sourcename: *const SQChar, raiseerror: SQBool)
                      -> SQRESULT;
    pub fn sq_compilebuffer(v: HSQUIRRELVM, s: *const SQChar, size: SQInteger,
                            sourcename: *const SQChar, raiseerror: SQBool)
                            -> SQRESULT;
    pub fn sq_enabledebuginfo(v: HSQUIRRELVM, enable: SQBool);
    pub fn sq_notifyallexceptions(v: HSQUIRRELVM, enable: SQBool);
    pub fn sq_setcompilererrorhandler(v: HSQUIRRELVM, f: SQCOMPILERERROR);
    pub fn sq_push(v: HSQUIRRELVM, idx: SQInteger);
    pub fn sq_pop(v: HSQUIRRELVM, nelemstopop: SQInteger);
    pub fn sq_poptop(v: HSQUIRRELVM);
    pub fn sq_remove(v: HSQUIRRELVM, idx: SQInteger);
    pub fn sq_gettop(v: HSQUIRRELVM) -> SQInteger;
    pub fn sq_settop(v: HSQUIRRELVM, newtop: SQInteger);
    pub fn sq_reservestack(v: HSQUIRRELVM, nsize: SQInteger) -> SQRESULT;
    pub fn sq_cmp(v: HSQUIRRELVM) -> SQInteger;
    pub fn sq_move(dest: HSQUIRRELVM, src: HSQUIRRELVM, idx: SQInteger);
    pub fn sq_newuserdata(v: HSQUIRRELVM, size: SQUnsignedInteger)
                          -> SQUserPointer;
    pub fn sq_newtable(v: HSQUIRRELVM);
    pub fn sq_newtableex(v: HSQUIRRELVM, initialcapacity: SQInteger);
    pub fn sq_newarray(v: HSQUIRRELVM, size: SQInteger);
    pub fn sq_newclosure(v: HSQUIRRELVM, func: SQFUNCTION,
                         nfreevars: SQUnsignedInteger);
    pub fn sq_setparamscheck(v: HSQUIRRELVM, nparamscheck: SQInteger,
                             typemask: *const SQChar) -> SQRESULT;
    pub fn sq_bindenv(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_setclosureroot(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_getclosureroot(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_pushstring(v: HSQUIRRELVM, s: *const SQChar, len: SQInteger);
    pub fn sq_pushfloat(v: HSQUIRRELVM, f: SQFloat);
    pub fn sq_pushinteger(v: HSQUIRRELVM, n: SQInteger);
    pub fn sq_pushbool(v: HSQUIRRELVM, b: SQBool);
    pub fn sq_pushuserpointer(v: HSQUIRRELVM, p: SQUserPointer);
    pub fn sq_pushnull(v: HSQUIRRELVM);
    pub fn sq_pushthread(v: HSQUIRRELVM, thread: HSQUIRRELVM);
    pub fn sq_gettype(v: HSQUIRRELVM, idx: SQInteger) -> SQObjectType;
    pub fn sq_typeof(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_getsize(v: HSQUIRRELVM, idx: SQInteger) -> SQInteger;
    pub fn sq_gethash(v: HSQUIRRELVM, idx: SQInteger) -> SQHash;
    pub fn sq_getbase(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_instanceof(v: HSQUIRRELVM) -> SQBool;
    pub fn sq_tostring(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_tobool(v: HSQUIRRELVM, idx: SQInteger, b: *mut SQBool);
    pub fn sq_getstring(v: HSQUIRRELVM, idx: SQInteger, c: *mut *const SQChar)
                        -> SQRESULT;
    pub fn sq_getinteger(v: HSQUIRRELVM, idx: SQInteger, i: *mut SQInteger)
                         -> SQRESULT;
    pub fn sq_getfloat(v: HSQUIRRELVM, idx: SQInteger, f: *mut SQFloat)
                       -> SQRESULT;
    pub fn sq_getbool(v: HSQUIRRELVM, idx: SQInteger, b: *mut SQBool)
                      -> SQRESULT;
    pub fn sq_getthread(v: HSQUIRRELVM, idx: SQInteger,
                        thread: *mut HSQUIRRELVM) -> SQRESULT;
    pub fn sq_getuserpointer(v: HSQUIRRELVM, idx: SQInteger,
                             p: *mut SQUserPointer) -> SQRESULT;
    pub fn sq_getuserdata(v: HSQUIRRELVM, idx: SQInteger,
                          p: *mut SQUserPointer, typetag: *mut SQUserPointer)
                          -> SQRESULT;
    pub fn sq_settypetag(v: HSQUIRRELVM, idx: SQInteger,
                         typetag: SQUserPointer) -> SQRESULT;
    pub fn sq_gettypetag(v: HSQUIRRELVM, idx: SQInteger,
                         typetag: *mut SQUserPointer) -> SQRESULT;
    pub fn sq_setreleasehook(v: HSQUIRRELVM, idx: SQInteger,
                             hook: SQRELEASEHOOK);
    pub fn sq_getreleasehook(v: HSQUIRRELVM, idx: SQInteger) -> SQRELEASEHOOK;
    pub fn sq_getscratchpad(v: HSQUIRRELVM, minsize: SQInteger)
                            -> *mut SQChar;
    pub fn sq_getfunctioninfo(v: HSQUIRRELVM, level: SQInteger,
                              fi: *mut SQFunctionInfo) -> SQRESULT;
    pub fn sq_getclosureinfo(v: HSQUIRRELVM, idx: SQInteger,
                             nparams: *mut SQUnsignedInteger,
                             nfreevars: *mut SQUnsignedInteger) -> SQRESULT;
    pub fn sq_getclosurename(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_setnativeclosurename(v: HSQUIRRELVM, idx: SQInteger,
                                   name: *const SQChar) -> SQRESULT;
    pub fn sq_setinstanceup(v: HSQUIRRELVM, idx: SQInteger, p: SQUserPointer)
                            -> SQRESULT;
    pub fn sq_getinstanceup(v: HSQUIRRELVM, idx: SQInteger,
                            p: *mut SQUserPointer, typetag: SQUserPointer)
                            -> SQRESULT;
    pub fn sq_setclassudsize(v: HSQUIRRELVM, idx: SQInteger,
                             udsize: SQInteger) -> SQRESULT;
    pub fn sq_newclass(v: HSQUIRRELVM, hasbase: SQBool) -> SQRESULT;
    pub fn sq_createinstance(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_setattributes(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_getattributes(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_getclass(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_weakref(v: HSQUIRRELVM, idx: SQInteger);
    pub fn sq_getdefaultdelegate(v: HSQUIRRELVM, t: SQObjectType) -> SQRESULT;
    pub fn sq_getmemberhandle(v: HSQUIRRELVM, idx: SQInteger,
                              handle: *mut HSQMEMBERHANDLE) -> SQRESULT;
    pub fn sq_getbyhandle(v: HSQUIRRELVM, idx: SQInteger,
                          handle: *const HSQMEMBERHANDLE) -> SQRESULT;
    pub fn sq_setbyhandle(v: HSQUIRRELVM, idx: SQInteger,
                          handle: *const HSQMEMBERHANDLE) -> SQRESULT;
    pub fn sq_pushroottable(v: HSQUIRRELVM);
    pub fn sq_pushregistrytable(v: HSQUIRRELVM);
    pub fn sq_pushconsttable(v: HSQUIRRELVM);
    pub fn sq_setroottable(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sq_setconsttable(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sq_newslot(v: HSQUIRRELVM, idx: SQInteger, bstatic: SQBool)
                      -> SQRESULT;
    pub fn sq_deleteslot(v: HSQUIRRELVM, idx: SQInteger, pushval: SQBool)
                         -> SQRESULT;
    pub fn sq_set(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_get(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_rawget(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_rawset(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_rawdeleteslot(v: HSQUIRRELVM, idx: SQInteger, pushval: SQBool)
                            -> SQRESULT;
    pub fn sq_newmember(v: HSQUIRRELVM, idx: SQInteger, bstatic: SQBool)
                        -> SQRESULT;
    pub fn sq_rawnewmember(v: HSQUIRRELVM, idx: SQInteger, bstatic: SQBool)
                           -> SQRESULT;
    pub fn sq_arrayappend(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_arraypop(v: HSQUIRRELVM, idx: SQInteger, pushval: SQBool)
                       -> SQRESULT;
    pub fn sq_arrayresize(v: HSQUIRRELVM, idx: SQInteger, newsize: SQInteger)
                          -> SQRESULT;
    pub fn sq_arrayreverse(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_arrayremove(v: HSQUIRRELVM, idx: SQInteger, itemidx: SQInteger)
                          -> SQRESULT;
    pub fn sq_arrayinsert(v: HSQUIRRELVM, idx: SQInteger, destpos: SQInteger)
                          -> SQRESULT;
    pub fn sq_setdelegate(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_getdelegate(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_clone(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_setfreevariable(v: HSQUIRRELVM, idx: SQInteger,
                              nval: SQUnsignedInteger) -> SQRESULT;
    pub fn sq_next(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_getweakrefval(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_clear(v: HSQUIRRELVM, idx: SQInteger) -> SQRESULT;
    pub fn sq_call(v: HSQUIRRELVM, params: SQInteger, retval: SQBool,
                   raiseerror: SQBool) -> SQRESULT;
    pub fn sq_resume(v: HSQUIRRELVM, retval: SQBool, raiseerror: SQBool)
                     -> SQRESULT;
    pub fn sq_getlocal(v: HSQUIRRELVM, level: SQUnsignedInteger,
                       idx: SQUnsignedInteger) -> *const SQChar;
    pub fn sq_getcallee(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sq_getfreevariable(v: HSQUIRRELVM, idx: SQInteger,
                              nval: SQUnsignedInteger) -> *const SQChar;
    pub fn sq_throwerror(v: HSQUIRRELVM, err: *const SQChar) -> SQRESULT;
    pub fn sq_throwobject(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sq_reseterror(v: HSQUIRRELVM);
    pub fn sq_getlasterror(v: HSQUIRRELVM);
    pub fn sq_getstackobj(v: HSQUIRRELVM, idx: SQInteger, po: *mut HSQOBJECT)
                          -> SQRESULT;
    pub fn sq_pushobject(v: HSQUIRRELVM, obj: HSQOBJECT);
    pub fn sq_addref(v: HSQUIRRELVM, po: *mut HSQOBJECT);
    pub fn sq_release(v: HSQUIRRELVM, po: *mut HSQOBJECT) -> SQBool;
    pub fn sq_getrefcount(v: HSQUIRRELVM, po: *mut HSQOBJECT)
                          -> SQUnsignedInteger;
    pub fn sq_resetobject(po: *mut HSQOBJECT);
    pub fn sq_objtostring(o: *const HSQOBJECT) -> *const SQChar;
    pub fn sq_objtobool(o: *const HSQOBJECT) -> SQBool;
    pub fn sq_objtointeger(o: *const HSQOBJECT) -> SQInteger;
    pub fn sq_objtofloat(o: *const HSQOBJECT) -> SQFloat;
    pub fn sq_objtouserpointer(o: *const HSQOBJECT) -> SQUserPointer;
    pub fn sq_getobjtypetag(o: *const HSQOBJECT, typetag: *mut SQUserPointer)
                            -> SQRESULT;
    pub fn sq_getvmrefcount(v: HSQUIRRELVM, po: *const HSQOBJECT)
                            -> SQUnsignedInteger;
    pub fn sq_collectgarbage(v: HSQUIRRELVM) -> SQInteger;
    pub fn sq_resurrectunreachable(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sq_writeclosure(vm: HSQUIRRELVM, writef: SQWRITEFUNC,
                           up: SQUserPointer) -> SQRESULT;
    pub fn sq_readclosure(vm: HSQUIRRELVM, readf: SQREADFUNC,
                          up: SQUserPointer) -> SQRESULT;
    pub fn sq_malloc(size: SQUnsignedInteger) -> *mut ::std::os::raw::c_void;
    pub fn sq_realloc(p: *mut ::std::os::raw::c_void,
                      oldsize: SQUnsignedInteger, newsize: SQUnsignedInteger)
                      -> *mut ::std::os::raw::c_void;
    pub fn sq_free(p: *mut ::std::os::raw::c_void, size: SQUnsignedInteger);
    pub fn sq_stackinfos(v: HSQUIRRELVM, level: SQInteger,
                         si: *mut SQStackInfos) -> SQRESULT;
    pub fn sq_setdebughook(v: HSQUIRRELVM);
    pub fn sq_setnativedebughook(v: HSQUIRRELVM, hook: SQDEBUGHOOK);
    pub fn sqstd_fopen(arg1: *const SQChar, arg2: *const SQChar) -> SQFILE;
    pub fn sqstd_fread(arg1: SQUserPointer, arg2: SQInteger, arg3: SQInteger,
                       arg4: SQFILE) -> SQInteger;
    pub fn sqstd_fwrite(arg1: SQUserPointer, arg2: SQInteger, arg3: SQInteger,
                        arg4: SQFILE) -> SQInteger;
    pub fn sqstd_fseek(arg1: SQFILE, arg2: SQInteger, arg3: SQInteger)
                       -> SQInteger;
    pub fn sqstd_ftell(arg1: SQFILE) -> SQInteger;
    pub fn sqstd_fflush(arg1: SQFILE) -> SQInteger;
    pub fn sqstd_fclose(arg1: SQFILE) -> SQInteger;
    pub fn sqstd_feof(arg1: SQFILE) -> SQInteger;
    pub fn sqstd_createfile(v: HSQUIRRELVM, file: SQFILE, own: SQBool)
                            -> SQRESULT;
    pub fn sqstd_getfile(v: HSQUIRRELVM, idx: SQInteger, file: *mut SQFILE)
                         -> SQRESULT;
    pub fn sqstd_loadfile(v: HSQUIRRELVM, filename: *const SQChar,
                          printerror: SQBool) -> SQRESULT;
    pub fn sqstd_dofile(v: HSQUIRRELVM, filename: *const SQChar,
                        retval: SQBool, printerror: SQBool) -> SQRESULT;
    pub fn sqstd_writeclosuretofile(v: HSQUIRRELVM, filename: *const SQChar)
                                    -> SQRESULT;
    pub fn sqstd_register_iolib(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sqstd_createblob(v: HSQUIRRELVM, size: SQInteger) -> SQUserPointer;
    pub fn sqstd_getblob(v: HSQUIRRELVM, idx: SQInteger,
                         ptr: *mut SQUserPointer) -> SQRESULT;
    pub fn sqstd_getblobsize(v: HSQUIRRELVM, idx: SQInteger) -> SQInteger;
    pub fn sqstd_register_bloblib(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sqstd_rex_compile(pattern: *const SQChar,
                             error: *mut *const SQChar) -> *mut SQRex;
    pub fn sqstd_rex_free(exp: *mut SQRex);
    pub fn sqstd_rex_match(exp: *mut SQRex, text: *const SQChar) -> SQBool;
    pub fn sqstd_rex_search(exp: *mut SQRex, text: *const SQChar,
                            out_begin: *mut *const SQChar,
                            out_end: *mut *const SQChar) -> SQBool;
    pub fn sqstd_rex_searchrange(exp: *mut SQRex, text_begin: *const SQChar,
                                 text_end: *const SQChar,
                                 out_begin: *mut *const SQChar,
                                 out_end: *mut *const SQChar) -> SQBool;
    pub fn sqstd_rex_getsubexpcount(exp: *mut SQRex) -> SQInteger;
    pub fn sqstd_rex_getsubexp(exp: *mut SQRex, n: SQInteger,
                               subexp: *mut SQRexMatch) -> SQBool;
    pub fn sqstd_format(v: HSQUIRRELVM, nformatstringidx: SQInteger,
                        outlen: *mut SQInteger, output: *mut *mut SQChar)
                        -> SQRESULT;
    pub fn sqstd_register_stringlib(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sqstd_register_mathlib(v: HSQUIRRELVM) -> SQRESULT;
    pub fn sqstd_register_systemlib(v: HSQUIRRELVM) -> SQInteger;
    pub fn sqstd_seterrorhandlers(v: HSQUIRRELVM);
    pub fn sqstd_printcallstack(v: HSQUIRRELVM);
}
